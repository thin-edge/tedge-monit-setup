#
# System monitoring
#
check system $HOST
    if memory usage >= 90% for 1 cycles then exec "/usr/bin/monit-tedge-message event system_mem_hi"
    if loadavg (5min) per core > 1.5 for 10 cycles then exec "/usr/bin/monit-tedge-message event system_loadavg_hi"
    if filedescriptors >= 90% then exec "/usr/bin/monit-tedge-message event system_fd_hi"

#
# Service level monitoring
#
# Don't bother trying to send a message to MQTT is MQTT is failing ;)

# match against mosquitto service so it does not rely on the mosquitto.pid which is not
# always used in all installations
check process mosquitto MATCHING "mosquitto -c .+"
    if failed port 1883 protocol mqtt then alert

# Note: the tedge-agent memory usage can spike when using package managed such as apt as
# they generally require a lot of memory (>100MB) if you access the indexes from any public software
# repositories.
check process tedge-agent with pidfile /run/lock/tedge-agent.lock
    if memory usage > 20 MB for 10 cycles then exec "/usr/bin/monit-tedge-message event tedge-agent_mem_hi"



########################################################################
# Monitor cloud connections
########################################################################
#
# <mapper>-enabled  - Checks if the mapper is activated
# <mapper>-connectivity - Checks if the mapper is connected or not, and reconnects it if required
#
# Note: If the path needs to use double quotes, use the hex value \0x22 instead
#

#
# Cumulocity IoT
#
check program c8y-enabled with path "/bin/sh -c '[ -n \0x22$(tedge config get c8y.url)\0x22 ]'"
    with timeout 5 seconds
    every 2 cycles
    if status != 0 then unmonitor
    group c8y

check program c8y-connectivity with path "/usr/bin/tedge connect c8y --test"
   with timeout 60 seconds
   every 120 cycles
   if status != 0 then alert
   if status != 0 for 10 cycles then exec "/usr/bin/tedge reconnect c8y"
   depends on c8y-enabled
   group c8y

#
# Azure IoT
#
check program az-enabled with path "/bin/sh -c '[ -n \0x22$(tedge config get az.url)\0x22 ]'"
    with timeout 5 seconds
    every 2 cycles
    if status != 0 then unmonitor
    group az

check program az-connectivity with path "/usr/bin/tedge connect az --test"
   with timeout 60 seconds
   every 120 cycles
   if status != 0 then alert
   if status != 0 for 10 cycles then exec "/usr/bin/tedge reconnect az"
   depends on az-enabled
   group az

#
# AWS
#
check program aws-enabled with path "/bin/sh -c '[ -n \0x22$(tedge config get aws.url)\0x22 ]'"
    with timeout 5 seconds
    every 2 cycles
    if status != 0 then unmonitor
    group aws

check program aws-connectivity with path "/usr/bin/tedge connect aws --test"
   with timeout 60 seconds
   every 120 cycles
   if status != 0 then alert
   if status != 0 for 10 cycles then exec "/usr/bin/tedge reconnect aws"
   depends on aws-enabled
   group aws
